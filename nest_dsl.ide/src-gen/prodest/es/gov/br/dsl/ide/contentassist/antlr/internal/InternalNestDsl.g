/*
 * generated by XText 2.18.0.M3
 */
grammar InternalNestDsl;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package prodest.es.gov.br.dsl.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package prodest.es.gov.br.dsl.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import prodest.es.gov.br.dsl.services.NestDslGrammarAccess;

}
@parser::members {
	private NestDslGrammarAccess grammarAccess;

	public void setGrammarAccess(NestDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleDomainmodel
entryRuleDomainmodel
:
{ before(grammarAccess.getDomainmodelRule()); }
	 ruleDomainmodel
{ after(grammarAccess.getDomainmodelRule()); } 
	 EOF 
;

// Rule Domainmodel
ruleDomainmodel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDomainmodelAccess().getElementsAssignment()); }
		(rule__Domainmodel__ElementsAssignment)*
		{ after(grammarAccess.getDomainmodelAccess().getElementsAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAbstractElement
entryRuleAbstractElement
:
{ before(grammarAccess.getAbstractElementRule()); }
	 ruleAbstractElement
{ after(grammarAccess.getAbstractElementRule()); } 
	 EOF 
;

// Rule AbstractElement
ruleAbstractElement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAbstractElementAccess().getTypeParserRuleCall()); }
		ruleType
		{ after(grammarAccess.getAbstractElementAccess().getTypeParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleType
entryRuleType
:
{ before(grammarAccess.getTypeRule()); }
	 ruleType
{ after(grammarAccess.getTypeRule()); } 
	 EOF 
;

// Rule Type
ruleType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTypeAccess().getAlternatives()); }
		(rule__Type__Alternatives)
		{ after(grammarAccess.getTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEntity
entryRuleEntity
:
{ before(grammarAccess.getEntityRule()); }
	 ruleEntity
{ after(grammarAccess.getEntityRule()); } 
	 EOF 
;

// Rule Entity
ruleEntity 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEntityAccess().getGroup()); }
		(rule__Entity__Group__0)
		{ after(grammarAccess.getEntityAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDto
entryRuleDto
:
{ before(grammarAccess.getDtoRule()); }
	 ruleDto
{ after(grammarAccess.getDtoRule()); } 
	 EOF 
;

// Rule Dto
ruleDto 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDtoAccess().getGroup()); }
		(rule__Dto__Group__0)
		{ after(grammarAccess.getDtoAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDataType
entryRuleDataType
:
{ before(grammarAccess.getDataTypeRule()); }
	 ruleDataType
{ after(grammarAccess.getDataTypeRule()); } 
	 EOF 
;

// Rule DataType
ruleDataType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDataTypeAccess().getGroup()); }
		(rule__DataType__Group__0)
		{ after(grammarAccess.getDataTypeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleQualifiedName
entryRuleQualifiedName
:
{ before(grammarAccess.getQualifiedNameRule()); }
	 ruleQualifiedName
{ after(grammarAccess.getQualifiedNameRule()); } 
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall()); }
		RULE_ID
		{ after(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleProperty
entryRuleProperty
:
{ before(grammarAccess.getPropertyRule()); }
	 ruleProperty
{ after(grammarAccess.getPropertyRule()); } 
	 EOF 
;

// Rule Property
ruleProperty 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPropertyAccess().getGroup()); }
		(rule__Property__Group__0)
		{ after(grammarAccess.getPropertyAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRelation
entryRuleRelation
:
{ before(grammarAccess.getRelationRule()); }
	 ruleRelation
{ after(grammarAccess.getRelationRule()); } 
	 EOF 
;

// Rule Relation
ruleRelation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRelationAccess().getAlternatives()); }
		(rule__Relation__Alternatives)
		{ after(grammarAccess.getRelationAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOneArgumentRelation
entryRuleOneArgumentRelation
:
{ before(grammarAccess.getOneArgumentRelationRule()); }
	 ruleOneArgumentRelation
{ after(grammarAccess.getOneArgumentRelationRule()); } 
	 EOF 
;

// Rule OneArgumentRelation
ruleOneArgumentRelation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOneArgumentRelationAccess().getGroup()); }
		(rule__OneArgumentRelation__Group__0)
		{ after(grammarAccess.getOneArgumentRelationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMultipleArgumentRelation
entryRuleMultipleArgumentRelation
:
{ before(grammarAccess.getMultipleArgumentRelationRule()); }
	 ruleMultipleArgumentRelation
{ after(grammarAccess.getMultipleArgumentRelationRule()); } 
	 EOF 
;

// Rule MultipleArgumentRelation
ruleMultipleArgumentRelation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMultipleArgumentRelationAccess().getGroup()); }
		(rule__MultipleArgumentRelation__Group__0)
		{ after(grammarAccess.getMultipleArgumentRelationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMethod
entryRuleMethod
:
{ before(grammarAccess.getMethodRule()); }
	 ruleMethod
{ after(grammarAccess.getMethodRule()); } 
	 EOF 
;

// Rule Method
ruleMethod 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMethodAccess().getGroup()); }
		(rule__Method__Group__0)
		{ after(grammarAccess.getMethodAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMethodArg
entryRuleMethodArg
:
{ before(grammarAccess.getMethodArgRule()); }
	 ruleMethodArg
{ after(grammarAccess.getMethodArgRule()); } 
	 EOF 
;

// Rule MethodArg
ruleMethodArg 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMethodArgAccess().getGroup()); }
		(rule__MethodArg__Group__0)
		{ after(grammarAccess.getMethodArgAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeAccess().getDataTypeParserRuleCall_0()); }
		ruleDataType
		{ after(grammarAccess.getTypeAccess().getDataTypeParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getTypeAccess().getEntityParserRuleCall_1()); }
		ruleEntity
		{ after(grammarAccess.getTypeAccess().getEntityParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getTypeAccess().getDtoParserRuleCall_2()); }
		ruleDto
		{ after(grammarAccess.getTypeAccess().getDtoParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Relation__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelationAccess().getOneArgumentAssignment_0()); }
		(rule__Relation__OneArgumentAssignment_0)
		{ after(grammarAccess.getRelationAccess().getOneArgumentAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getRelationAccess().getMultipleArgumentAssignment_1()); }
		(rule__Relation__MultipleArgumentAssignment_1)
		{ after(grammarAccess.getRelationAccess().getMultipleArgumentAssignment_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OneArgumentRelation__ArgumentAlternatives_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOneArgumentRelationAccess().getArgumentOneToOneKeyword_0_0_0()); }
		'OneToOne'
		{ after(grammarAccess.getOneArgumentRelationAccess().getArgumentOneToOneKeyword_0_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getOneArgumentRelationAccess().getArgumentManyToManyKeyword_0_0_1()); }
		'ManyToMany'
		{ after(grammarAccess.getOneArgumentRelationAccess().getArgumentManyToManyKeyword_0_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultipleArgumentRelation__ArgumentAlternatives_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultipleArgumentRelationAccess().getArgumentManyToOneKeyword_0_0_0()); }
		'ManyToOne'
		{ after(grammarAccess.getMultipleArgumentRelationAccess().getArgumentManyToOneKeyword_0_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getMultipleArgumentRelationAccess().getArgumentOneToManyKeyword_0_0_1()); }
		'OneToMany'
		{ after(grammarAccess.getMultipleArgumentRelationAccess().getArgumentOneToManyKeyword_0_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__VerbAlternatives_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMethodAccess().getVerbGetKeyword_0_0_0()); }
		'Get'
		{ after(grammarAccess.getMethodAccess().getVerbGetKeyword_0_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getMethodAccess().getVerbPostKeyword_0_0_1()); }
		'Post'
		{ after(grammarAccess.getMethodAccess().getVerbPostKeyword_0_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getMethodAccess().getVerbDeleteKeyword_0_0_2()); }
		'Delete'
		{ after(grammarAccess.getMethodAccess().getVerbDeleteKeyword_0_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getMethodAccess().getVerbPutKeyword_0_0_3()); }
		'Put'
		{ after(grammarAccess.getMethodAccess().getVerbPutKeyword_0_0_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Entity__Group__0__Impl
	rule__Entity__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEntityAccess().getEntityKeyword_0()); }
	'entity'
	{ after(grammarAccess.getEntityAccess().getEntityKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Entity__Group__1__Impl
	rule__Entity__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEntityAccess().getNameAssignment_1()); }
	(rule__Entity__NameAssignment_1)
	{ after(grammarAccess.getEntityAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Entity__Group__2__Impl
	rule__Entity__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEntityAccess().getGroup_2()); }
	(rule__Entity__Group_2__0)?
	{ after(grammarAccess.getEntityAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Entity__Group__3__Impl
	rule__Entity__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEntityAccess().getLeftCurlyBracketKeyword_3()); }
	'{'
	{ after(grammarAccess.getEntityAccess().getLeftCurlyBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Entity__Group__4__Impl
	rule__Entity__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEntityAccess().getPropertiesAssignment_4()); }
	(rule__Entity__PropertiesAssignment_4)*
	{ after(grammarAccess.getEntityAccess().getPropertiesAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Entity__Group__5__Impl
	rule__Entity__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEntityAccess().getMethodsAssignment_5()); }
	(rule__Entity__MethodsAssignment_5)*
	{ after(grammarAccess.getEntityAccess().getMethodsAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Entity__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEntityAccess().getRightCurlyBracketKeyword_6()); }
	'}'
	{ after(grammarAccess.getEntityAccess().getRightCurlyBracketKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Entity__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Entity__Group_2__0__Impl
	rule__Entity__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEntityAccess().getExtendsKeyword_2_0()); }
	'extends'
	{ after(grammarAccess.getEntityAccess().getExtendsKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Entity__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEntityAccess().getSuperTypeAssignment_2_1()); }
	(rule__Entity__SuperTypeAssignment_2_1)
	{ after(grammarAccess.getEntityAccess().getSuperTypeAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Dto__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Dto__Group__0__Impl
	rule__Dto__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Dto__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDtoAccess().getDtoKeyword_0()); }
	'dto'
	{ after(grammarAccess.getDtoAccess().getDtoKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dto__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Dto__Group__1__Impl
	rule__Dto__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Dto__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDtoAccess().getNameAssignment_1()); }
	(rule__Dto__NameAssignment_1)
	{ after(grammarAccess.getDtoAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dto__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Dto__Group__2__Impl
	rule__Dto__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Dto__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDtoAccess().getGroup_2()); }
	(rule__Dto__Group_2__0)?
	{ after(grammarAccess.getDtoAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dto__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Dto__Group__3__Impl
	rule__Dto__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Dto__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDtoAccess().getLeftCurlyBracketKeyword_3()); }
	'{'
	{ after(grammarAccess.getDtoAccess().getLeftCurlyBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dto__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Dto__Group__4__Impl
	rule__Dto__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Dto__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDtoAccess().getPropertiesAssignment_4()); }
	(rule__Dto__PropertiesAssignment_4)*
	{ after(grammarAccess.getDtoAccess().getPropertiesAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dto__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Dto__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Dto__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDtoAccess().getRightCurlyBracketKeyword_5()); }
	'}'
	{ after(grammarAccess.getDtoAccess().getRightCurlyBracketKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Dto__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Dto__Group_2__0__Impl
	rule__Dto__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Dto__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDtoAccess().getExtendsKeyword_2_0()); }
	'extends'
	{ after(grammarAccess.getDtoAccess().getExtendsKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dto__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Dto__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Dto__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDtoAccess().getSuperTypeAssignment_2_1()); }
	(rule__Dto__SuperTypeAssignment_2_1)
	{ after(grammarAccess.getDtoAccess().getSuperTypeAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DataType__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DataType__Group__0__Impl
	rule__DataType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DataType__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDataTypeAccess().getTypeKeyword_0()); }
	'type'
	{ after(grammarAccess.getDataTypeAccess().getTypeKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DataType__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DataType__Group__1__Impl
	rule__DataType__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DataType__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDataTypeAccess().getNameAssignment_1()); }
	(rule__DataType__NameAssignment_1)
	{ after(grammarAccess.getDataTypeAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DataType__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DataType__Group__2__Impl
	rule__DataType__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__DataType__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDataTypeAccess().getLeftSquareBracketRightSquareBracketKeyword_2()); }
	('[]')?
	{ after(grammarAccess.getDataTypeAccess().getLeftSquareBracketRightSquareBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DataType__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DataType__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DataType__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDataTypeAccess().getSemicolonKeyword_3()); }
	(';')?
	{ after(grammarAccess.getDataTypeAccess().getSemicolonKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Property__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Property__Group__0__Impl
	rule__Property__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Property__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPropertyAccess().getRelationAssignment_0()); }
	(rule__Property__RelationAssignment_0)?
	{ after(grammarAccess.getPropertyAccess().getRelationAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Property__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Property__Group__1__Impl
	rule__Property__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Property__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPropertyAccess().getNameAssignment_1()); }
	(rule__Property__NameAssignment_1)
	{ after(grammarAccess.getPropertyAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Property__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Property__Group__2__Impl
	rule__Property__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Property__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPropertyAccess().getColonKeyword_2()); }
	':'
	{ after(grammarAccess.getPropertyAccess().getColonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Property__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Property__Group__3__Impl
	rule__Property__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Property__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPropertyAccess().getTypeAssignment_3()); }
	(rule__Property__TypeAssignment_3)
	{ after(grammarAccess.getPropertyAccess().getTypeAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Property__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Property__Group__4__Impl
	rule__Property__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Property__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPropertyAccess().getArrayAssignment_4()); }
	(rule__Property__ArrayAssignment_4)?
	{ after(grammarAccess.getPropertyAccess().getArrayAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Property__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Property__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Property__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPropertyAccess().getSemicolonKeyword_5()); }
	(';')?
	{ after(grammarAccess.getPropertyAccess().getSemicolonKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OneArgumentRelation__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OneArgumentRelation__Group__0__Impl
	rule__OneArgumentRelation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OneArgumentRelation__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOneArgumentRelationAccess().getArgumentAssignment_0()); }
	(rule__OneArgumentRelation__ArgumentAssignment_0)
	{ after(grammarAccess.getOneArgumentRelationAccess().getArgumentAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OneArgumentRelation__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OneArgumentRelation__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OneArgumentRelation__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOneArgumentRelationAccess().getTypeAssignment_1()); }
	(rule__OneArgumentRelation__TypeAssignment_1)
	{ after(grammarAccess.getOneArgumentRelationAccess().getTypeAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MultipleArgumentRelation__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultipleArgumentRelation__Group__0__Impl
	rule__MultipleArgumentRelation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultipleArgumentRelation__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultipleArgumentRelationAccess().getArgumentAssignment_0()); }
	(rule__MultipleArgumentRelation__ArgumentAssignment_0)
	{ after(grammarAccess.getMultipleArgumentRelationAccess().getArgumentAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultipleArgumentRelation__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultipleArgumentRelation__Group__1__Impl
	rule__MultipleArgumentRelation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MultipleArgumentRelation__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultipleArgumentRelationAccess().getTypeAssignment_1()); }
	(rule__MultipleArgumentRelation__TypeAssignment_1)
	{ after(grammarAccess.getMultipleArgumentRelationAccess().getTypeAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultipleArgumentRelation__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultipleArgumentRelation__Group__2__Impl
	rule__MultipleArgumentRelation__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__MultipleArgumentRelation__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultipleArgumentRelationAccess().getCommaKeyword_2()); }
	','
	{ after(grammarAccess.getMultipleArgumentRelationAccess().getCommaKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultipleArgumentRelation__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultipleArgumentRelation__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultipleArgumentRelation__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultipleArgumentRelationAccess().getSecondArgumentAssignment_3()); }
	(rule__MultipleArgumentRelation__SecondArgumentAssignment_3)
	{ after(grammarAccess.getMultipleArgumentRelationAccess().getSecondArgumentAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Method__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Method__Group__0__Impl
	rule__Method__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodAccess().getVerbAssignment_0()); }
	(rule__Method__VerbAssignment_0)
	{ after(grammarAccess.getMethodAccess().getVerbAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Method__Group__1__Impl
	rule__Method__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodAccess().getNameAssignment_1()); }
	(rule__Method__NameAssignment_1)
	{ after(grammarAccess.getMethodAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Method__Group__2__Impl
	rule__Method__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodAccess().getLeftParenthesisKeyword_2()); }
	'('
	{ after(grammarAccess.getMethodAccess().getLeftParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Method__Group__3__Impl
	rule__Method__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodAccess().getGroup_3()); }
	(rule__Method__Group_3__0)*
	{ after(grammarAccess.getMethodAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Method__Group__4__Impl
	rule__Method__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodAccess().getRightParenthesisColonKeyword_4()); }
	'):'
	{ after(grammarAccess.getMethodAccess().getRightParenthesisColonKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Method__Group__5__Impl
	rule__Method__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodAccess().getReturnTypeAssignment_5()); }
	(rule__Method__ReturnTypeAssignment_5)
	{ after(grammarAccess.getMethodAccess().getReturnTypeAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Method__Group__6__Impl
	rule__Method__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodAccess().getArrayAssignment_6()); }
	(rule__Method__ArrayAssignment_6)?
	{ after(grammarAccess.getMethodAccess().getArrayAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Method__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodAccess().getSemicolonKeyword_7()); }
	(';')?
	{ after(grammarAccess.getMethodAccess().getSemicolonKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Method__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Method__Group_3__0__Impl
	rule__Method__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodAccess().getArgsAssignment_3_0()); }
	(rule__Method__ArgsAssignment_3_0)
	{ after(grammarAccess.getMethodAccess().getArgsAssignment_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Method__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodAccess().getCommaKeyword_3_1()); }
	(',')?
	{ after(grammarAccess.getMethodAccess().getCommaKeyword_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MethodArg__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MethodArg__Group__0__Impl
	rule__MethodArg__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodArg__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodArgAccess().getNameAssignment_0()); }
	(rule__MethodArg__NameAssignment_0)
	{ after(grammarAccess.getMethodArgAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodArg__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MethodArg__Group__1__Impl
	rule__MethodArg__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodArg__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodArgAccess().getColonKeyword_1()); }
	':'
	{ after(grammarAccess.getMethodArgAccess().getColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodArg__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MethodArg__Group__2__Impl
	rule__MethodArg__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodArg__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodArgAccess().getTypeAssignment_2()); }
	(rule__MethodArg__TypeAssignment_2)
	{ after(grammarAccess.getMethodArgAccess().getTypeAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodArg__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MethodArg__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodArg__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodArgAccess().getArrayAssignment_3()); }
	(rule__MethodArg__ArrayAssignment_3)?
	{ after(grammarAccess.getMethodArgAccess().getArrayAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Domainmodel__ElementsAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDomainmodelAccess().getElementsAbstractElementParserRuleCall_0()); }
		ruleAbstractElement
		{ after(grammarAccess.getDomainmodelAccess().getElementsAbstractElementParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEntityAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getEntityAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__SuperTypeAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEntityAccess().getSuperTypeEntityCrossReference_2_1_0()); }
		(
			{ before(grammarAccess.getEntityAccess().getSuperTypeEntityQualifiedNameParserRuleCall_2_1_0_1()); }
			ruleQualifiedName
			{ after(grammarAccess.getEntityAccess().getSuperTypeEntityQualifiedNameParserRuleCall_2_1_0_1()); }
		)
		{ after(grammarAccess.getEntityAccess().getSuperTypeEntityCrossReference_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__PropertiesAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEntityAccess().getPropertiesPropertyParserRuleCall_4_0()); }
		ruleProperty
		{ after(grammarAccess.getEntityAccess().getPropertiesPropertyParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__MethodsAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEntityAccess().getMethodsMethodParserRuleCall_5_0()); }
		ruleMethod
		{ after(grammarAccess.getEntityAccess().getMethodsMethodParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dto__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDtoAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getDtoAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dto__SuperTypeAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDtoAccess().getSuperTypeDtoCrossReference_2_1_0()); }
		(
			{ before(grammarAccess.getDtoAccess().getSuperTypeDtoQualifiedNameParserRuleCall_2_1_0_1()); }
			ruleQualifiedName
			{ after(grammarAccess.getDtoAccess().getSuperTypeDtoQualifiedNameParserRuleCall_2_1_0_1()); }
		)
		{ after(grammarAccess.getDtoAccess().getSuperTypeDtoCrossReference_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dto__PropertiesAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDtoAccess().getPropertiesPropertyParserRuleCall_4_0()); }
		ruleProperty
		{ after(grammarAccess.getDtoAccess().getPropertiesPropertyParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DataType__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDataTypeAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getDataTypeAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Property__RelationAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPropertyAccess().getRelationRelationParserRuleCall_0_0()); }
		ruleRelation
		{ after(grammarAccess.getPropertyAccess().getRelationRelationParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Property__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPropertyAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getPropertyAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Property__TypeAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPropertyAccess().getTypeTypeCrossReference_3_0()); }
		(
			{ before(grammarAccess.getPropertyAccess().getTypeTypeQualifiedNameParserRuleCall_3_0_1()); }
			ruleQualifiedName
			{ after(grammarAccess.getPropertyAccess().getTypeTypeQualifiedNameParserRuleCall_3_0_1()); }
		)
		{ after(grammarAccess.getPropertyAccess().getTypeTypeCrossReference_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Property__ArrayAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPropertyAccess().getArrayLeftSquareBracketRightSquareBracketKeyword_4_0()); }
		(
			{ before(grammarAccess.getPropertyAccess().getArrayLeftSquareBracketRightSquareBracketKeyword_4_0()); }
			'[]'
			{ after(grammarAccess.getPropertyAccess().getArrayLeftSquareBracketRightSquareBracketKeyword_4_0()); }
		)
		{ after(grammarAccess.getPropertyAccess().getArrayLeftSquareBracketRightSquareBracketKeyword_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Relation__OneArgumentAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelationAccess().getOneArgumentOneArgumentRelationParserRuleCall_0_0()); }
		ruleOneArgumentRelation
		{ after(grammarAccess.getRelationAccess().getOneArgumentOneArgumentRelationParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Relation__MultipleArgumentAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelationAccess().getMultipleArgumentMultipleArgumentRelationParserRuleCall_1_0()); }
		ruleMultipleArgumentRelation
		{ after(grammarAccess.getRelationAccess().getMultipleArgumentMultipleArgumentRelationParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OneArgumentRelation__ArgumentAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOneArgumentRelationAccess().getArgumentAlternatives_0_0()); }
		(rule__OneArgumentRelation__ArgumentAlternatives_0_0)
		{ after(grammarAccess.getOneArgumentRelationAccess().getArgumentAlternatives_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OneArgumentRelation__TypeAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOneArgumentRelationAccess().getTypeEntityCrossReference_1_0()); }
		(
			{ before(grammarAccess.getOneArgumentRelationAccess().getTypeEntityIDTerminalRuleCall_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getOneArgumentRelationAccess().getTypeEntityIDTerminalRuleCall_1_0_1()); }
		)
		{ after(grammarAccess.getOneArgumentRelationAccess().getTypeEntityCrossReference_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultipleArgumentRelation__ArgumentAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultipleArgumentRelationAccess().getArgumentAlternatives_0_0()); }
		(rule__MultipleArgumentRelation__ArgumentAlternatives_0_0)
		{ after(grammarAccess.getMultipleArgumentRelationAccess().getArgumentAlternatives_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultipleArgumentRelation__TypeAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultipleArgumentRelationAccess().getTypeEntityCrossReference_1_0()); }
		(
			{ before(grammarAccess.getMultipleArgumentRelationAccess().getTypeEntityIDTerminalRuleCall_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getMultipleArgumentRelationAccess().getTypeEntityIDTerminalRuleCall_1_0_1()); }
		)
		{ after(grammarAccess.getMultipleArgumentRelationAccess().getTypeEntityCrossReference_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultipleArgumentRelation__SecondArgumentAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultipleArgumentRelationAccess().getSecondArgumentARGUMENTREGEXTerminalRuleCall_3_0()); }
		RULE_ARGUMENTREGEX
		{ after(grammarAccess.getMultipleArgumentRelationAccess().getSecondArgumentARGUMENTREGEXTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__VerbAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMethodAccess().getVerbAlternatives_0_0()); }
		(rule__Method__VerbAlternatives_0_0)
		{ after(grammarAccess.getMethodAccess().getVerbAlternatives_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMethodAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getMethodAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__ArgsAssignment_3_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMethodAccess().getArgsMethodArgParserRuleCall_3_0_0()); }
		ruleMethodArg
		{ after(grammarAccess.getMethodAccess().getArgsMethodArgParserRuleCall_3_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__ReturnTypeAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMethodAccess().getReturnTypeTypeCrossReference_5_0()); }
		(
			{ before(grammarAccess.getMethodAccess().getReturnTypeTypeQualifiedNameParserRuleCall_5_0_1()); }
			ruleQualifiedName
			{ after(grammarAccess.getMethodAccess().getReturnTypeTypeQualifiedNameParserRuleCall_5_0_1()); }
		)
		{ after(grammarAccess.getMethodAccess().getReturnTypeTypeCrossReference_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__ArrayAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMethodAccess().getArrayLeftSquareBracketRightSquareBracketKeyword_6_0()); }
		(
			{ before(grammarAccess.getMethodAccess().getArrayLeftSquareBracketRightSquareBracketKeyword_6_0()); }
			'[]'
			{ after(grammarAccess.getMethodAccess().getArrayLeftSquareBracketRightSquareBracketKeyword_6_0()); }
		)
		{ after(grammarAccess.getMethodAccess().getArrayLeftSquareBracketRightSquareBracketKeyword_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodArg__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMethodArgAccess().getNameIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getMethodArgAccess().getNameIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodArg__TypeAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMethodArgAccess().getTypeTypeCrossReference_2_0()); }
		(
			{ before(grammarAccess.getMethodArgAccess().getTypeTypeQualifiedNameParserRuleCall_2_0_1()); }
			ruleQualifiedName
			{ after(grammarAccess.getMethodArgAccess().getTypeTypeQualifiedNameParserRuleCall_2_0_1()); }
		)
		{ after(grammarAccess.getMethodArgAccess().getTypeTypeCrossReference_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodArg__ArrayAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMethodArgAccess().getArrayLeftSquareBracketRightSquareBracketKeyword_3_0()); }
		(
			{ before(grammarAccess.getMethodArgAccess().getArrayLeftSquareBracketRightSquareBracketKeyword_3_0()); }
			'[]'
			{ after(grammarAccess.getMethodArgAccess().getArrayLeftSquareBracketRightSquareBracketKeyword_3_0()); }
		)
		{ after(grammarAccess.getMethodArgAccess().getArrayLeftSquareBracketRightSquareBracketKeyword_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ARGUMENTREGEX : ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')* '=>' ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')* '.' ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
