package prodest.es.gov.br.dsl.generator;

import com.google.common.collect.Iterables;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import prodest.es.gov.br.dsl.nestdsl.Entity;

@SuppressWarnings("all")
public class GenericCoreGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    Iterable<Entity> _filter = Iterables.<Entity>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Entity.class);
    for (final Entity e : _filter) {
      {
        fsa.generateFile(
          "src/BaseModule/IBase.interface.ts", 
          this.interfaceCompiler());
        fsa.generateFile(
          "src/BaseModule/base.service.ts", 
          this.serviceCompiler());
        fsa.generateFile(
          "src/BaseModule/base.controller.ts", 
          this.controllerCompiller());
      }
    }
  }
  
  public CharSequence interfaceCompiler() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("export interface IBaseService<T>{");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("findAll(): Promise<T[]>;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("findOne(id: number): Promise<T>;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("createOne(object: T): Promise<void>;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("updateOne(id:number, object: T): Promise<void>;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("deleteOne(id: number): Promise<void>;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence serviceCompiler() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import { IBaseService } from \"./IBase.interface\";");
    _builder.newLine();
    _builder.append("import { Injectable } from \'@nestjs/common\';");
    _builder.newLine();
    _builder.append("import { Repository } from \'typeorm\';");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@Injectable()");
    _builder.newLine();
    _builder.append("export class BaseService <T> implements IBaseService<T>{");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("constructor(");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("private readonly baseRepository: Repository<T>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("){}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("async findAll(): Promise<T[]> {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return await this.baseRepository.find();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}  ");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("async findOne(id: number): Promise<T> {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return await this.baseRepository.findOne(id);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("async createOne(object: T): Promise<void> {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("await this.baseRepository.save(object);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("async updateOne(id:number, object: T): Promise<void> {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("await this.baseRepository.update(id, object);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("async deleteOne(id: number): Promise<void> {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("await this.baseRepository.delete(id);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence controllerCompiller() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import { Get, Post, Put, Delete, Param, Res, HttpStatus, Body } from \'@nestjs/common\';");
    _builder.newLine();
    _builder.append("import { ApiOperation, ApiResponse, ApiImplicitParam } from \'@nestjs/swagger\';");
    _builder.newLine();
    _builder.append("import { IBaseService } from \'./IBase.interface\';");
    _builder.newLine();
    _builder.newLine();
    _builder.append("export class BaseController<T>{");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("constructor(");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("private readonly baseService: IBaseService<T>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("){}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Get()");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@ApiOperation({");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("title: \'Find all\',");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("description: \'Find all records of this entity\'");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("})");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@ApiResponse({");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("status: 200,");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("description: \'All records was retrieved successfully\',");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("isArray: true");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("})");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public async findAll(@Res() res): Promise<T[]>{");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("try{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return res");
    _builder.newLine();
    _builder.append("\t\t \t\t\t");
    _builder.append(".status(HttpStatus.OK)");
    _builder.newLine();
    _builder.append("\t\t\t \t\t");
    _builder.append(".send(await this.baseService.findAll());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("catch(error){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("const badGateWay = HttpStatus.BAD_GATEWAY;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("res");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append(".status(badGateWay)");
    _builder.newLine();
    _builder.append("\t \t\t\t");
    _builder.append(".send({error, badGateWay});");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Get(\':id\')");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@ApiOperation({");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("title: \'Find one\',");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("description: \'Find one record of this entity\'");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("})");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@ApiResponse({");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("status: 200,");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("description: \'The record was retrieved successfully\',");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("isArray: false");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("})");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@ApiImplicitParam({");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("name: \'id\',");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("description: \'Record ID\',");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("required: true, //or false");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("type: \'number\'");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("})");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public async findOne(@Res() res, @Param(\'id\') id): Promise<T> {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return res");
    _builder.newLine();
    _builder.append("\t\t\t \t");
    _builder.append(".status(HttpStatus.OK)");
    _builder.newLine();
    _builder.append("\t\t\t \t");
    _builder.append(".send(await this.baseService.findOne(id));");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("catch(error){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("const badGateWay = HttpStatus.BAD_GATEWAY;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("res");
    _builder.newLine();
    _builder.append("\t\t\t\t ");
    _builder.append(".status(badGateWay)");
    _builder.newLine();
    _builder.append("\t\t\t\t ");
    _builder.append(".send({error, badGateWay});");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Post()");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@ApiOperation({");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("title: \'Create one\',");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("description: \'Create an entity record\'");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("})");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@ApiResponse({");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("status: 200,");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("description: \'The record was created successfully\',");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("isArray: false // or true");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("})");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public async createOne(@Res() res, @Body() object: T): Promise<void> {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("res");
    _builder.newLine();
    _builder.append("\t\t\t ");
    _builder.append(".status(HttpStatus.OK)");
    _builder.newLine();
    _builder.append("\t\t\t ");
    _builder.append(".send(await this.baseService.createOne(object));");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("catch(error){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("const badGateWay = HttpStatus.BAD_GATEWAY;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("res");
    _builder.newLine();
    _builder.append("\t\t\t\t ");
    _builder.append(".status(badGateWay)");
    _builder.newLine();
    _builder.append("\t\t\t\t ");
    _builder.append(".send({error, badGateWay});");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Put(\':id\')");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@ApiOperation({");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("title: \'Update one\',");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("description: \'Update an entity record\'");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("})");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@ApiResponse({");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("status: 200,");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("description: \'The record was updated successfully\',");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("isArray: false");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("})");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@ApiImplicitParam({");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("name: \'id\',");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("description: \'Record ID\',");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("required: true, //or false");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("type: \'number\'");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("})");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public async updateOne(@Res() res, @Param(\'id\') id, @Body() object: T): Promise<void> {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("res");
    _builder.newLine();
    _builder.append("\t\t\t ");
    _builder.append(".status(HttpStatus.OK)");
    _builder.newLine();
    _builder.append("\t\t\t ");
    _builder.append(".send(await this.baseService.updateOne(id, object));");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("catch(error){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("const badGateWay = HttpStatus.BAD_GATEWAY;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("res");
    _builder.newLine();
    _builder.append("\t\t\t ");
    _builder.append(".status(badGateWay)");
    _builder.newLine();
    _builder.append("\t\t\t ");
    _builder.append(".send({error, badGateWay});");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Delete(\':id\')");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@ApiOperation({");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("title: \'Delete one\',");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("description: \'Delete an entity record\'");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("})");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@ApiResponse({");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("status: 200,");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("description: \'The record was deleted successfully\',");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("isArray: false");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("})");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@ApiImplicitParam({");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("name: \'id\',");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("description: \'Record ID\',");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("required: true, //or false");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("type: \'number\'");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("})\t\t    ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public async deleteOne(@Res() res, @Param(\'id\') id): Promise<void> {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("res");
    _builder.newLine();
    _builder.append("\t\t\t ");
    _builder.append(".status(HttpStatus.OK)");
    _builder.newLine();
    _builder.append("\t\t\t ");
    _builder.append(".send(await this.baseService.deleteOne(id));");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("catch(error){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("const badGateWay = HttpStatus.BAD_GATEWAY;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("res");
    _builder.newLine();
    _builder.append("\t\t\t ");
    _builder.append(".status(badGateWay)");
    _builder.newLine();
    _builder.append("\t\t\t ");
    _builder.append(".send({error, badGateWay});");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
}
