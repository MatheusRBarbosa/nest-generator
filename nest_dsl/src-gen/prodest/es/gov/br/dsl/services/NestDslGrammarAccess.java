/*
 * generated by XText 2.18.0.M3
 */
package prodest.es.gov.br.dsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class NestDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class DomainmodelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "prodest.es.gov.br.dsl.NestDsl.Domainmodel");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementsAbstractElementParserRuleCall_0 = (RuleCall)cElementsAssignment.eContents().get(0);
		
		//Domainmodel:
		//	elements+=AbstractElement*;
		@Override public ParserRule getRule() { return rule; }
		
		//elements+=AbstractElement*
		public Assignment getElementsAssignment() { return cElementsAssignment; }
		
		//AbstractElement
		public RuleCall getElementsAbstractElementParserRuleCall_0() { return cElementsAbstractElementParserRuleCall_0; }
	}
	public class AbstractElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "prodest.es.gov.br.dsl.NestDsl.AbstractElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEntityParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDtoParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AbstractElement:
		//	Entity | Dto;
		@Override public ParserRule getRule() { return rule; }
		
		//Entity | Dto
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Entity
		public RuleCall getEntityParserRuleCall_0() { return cEntityParserRuleCall_0; }
		
		//Dto
		public RuleCall getDtoParserRuleCall_1() { return cDtoParserRuleCall_1; }
	}
	public class EntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "prodest.es.gov.br.dsl.NestDsl.Entity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEntityKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cExtendsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSuperTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cSuperTypeEntityCrossReference_2_1_0 = (CrossReference)cSuperTypeAssignment_2_1.eContents().get(0);
		private final RuleCall cSuperTypeEntityQualifiedNameParserRuleCall_2_1_0_1 = (RuleCall)cSuperTypeEntityCrossReference_2_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPropertiesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPropertiesPropertyParserRuleCall_4_0 = (RuleCall)cPropertiesAssignment_4.eContents().get(0);
		private final Assignment cMethodsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cMethodsMethodParserRuleCall_5_0 = (RuleCall)cMethodsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Entity:
		//	'entity' name=ID ('extends' superType=[Entity|QualifiedName])? '{'
		//	properties+=Property*
		//	methods+=Method*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'entity' name=ID ('extends' superType=[Entity|QualifiedName])? '{' properties+=Property* methods+=Method* '}'
		public Group getGroup() { return cGroup; }
		
		//'entity'
		public Keyword getEntityKeyword_0() { return cEntityKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('extends' superType=[Entity|QualifiedName])?
		public Group getGroup_2() { return cGroup_2; }
		
		//'extends'
		public Keyword getExtendsKeyword_2_0() { return cExtendsKeyword_2_0; }
		
		//superType=[Entity|QualifiedName]
		public Assignment getSuperTypeAssignment_2_1() { return cSuperTypeAssignment_2_1; }
		
		//[Entity|QualifiedName]
		public CrossReference getSuperTypeEntityCrossReference_2_1_0() { return cSuperTypeEntityCrossReference_2_1_0; }
		
		//QualifiedName
		public RuleCall getSuperTypeEntityQualifiedNameParserRuleCall_2_1_0_1() { return cSuperTypeEntityQualifiedNameParserRuleCall_2_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//properties+=Property*
		public Assignment getPropertiesAssignment_4() { return cPropertiesAssignment_4; }
		
		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_4_0() { return cPropertiesPropertyParserRuleCall_4_0; }
		
		//methods+=Method*
		public Assignment getMethodsAssignment_5() { return cMethodsAssignment_5; }
		
		//Method
		public RuleCall getMethodsMethodParserRuleCall_5_0() { return cMethodsMethodParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class DtoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "prodest.es.gov.br.dsl.NestDsl.Dto");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDtoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cExtendsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSuperTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cSuperTypeDtoCrossReference_2_1_0 = (CrossReference)cSuperTypeAssignment_2_1.eContents().get(0);
		private final RuleCall cSuperTypeDtoQualifiedNameParserRuleCall_2_1_0_1 = (RuleCall)cSuperTypeDtoCrossReference_2_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPropertiesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPropertiesDtoPropertyParserRuleCall_4_0 = (RuleCall)cPropertiesAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Dto:
		//	'dto' name=ID ('extends' superType=[Dto|QualifiedName])? '{'
		//	properties+=DtoProperty*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'dto' name=ID ('extends' superType=[Dto|QualifiedName])? '{' properties+=DtoProperty* '}'
		public Group getGroup() { return cGroup; }
		
		//'dto'
		public Keyword getDtoKeyword_0() { return cDtoKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('extends' superType=[Dto|QualifiedName])?
		public Group getGroup_2() { return cGroup_2; }
		
		//'extends'
		public Keyword getExtendsKeyword_2_0() { return cExtendsKeyword_2_0; }
		
		//superType=[Dto|QualifiedName]
		public Assignment getSuperTypeAssignment_2_1() { return cSuperTypeAssignment_2_1; }
		
		//[Dto|QualifiedName]
		public CrossReference getSuperTypeDtoCrossReference_2_1_0() { return cSuperTypeDtoCrossReference_2_1_0; }
		
		//QualifiedName
		public RuleCall getSuperTypeDtoQualifiedNameParserRuleCall_2_1_0_1() { return cSuperTypeDtoQualifiedNameParserRuleCall_2_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//properties+=DtoProperty*
		public Assignment getPropertiesAssignment_4() { return cPropertiesAssignment_4; }
		
		//DtoProperty
		public RuleCall getPropertiesDtoPropertyParserRuleCall_4_0() { return cPropertiesDtoPropertyParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "prodest.es.gov.br.dsl.NestDsl.QualifiedName");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//QualifiedName:
		//	ID;
		@Override public ParserRule getRule() { return rule; }
		
		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}
	public class PropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "prodest.es.gov.br.dsl.NestDsl.Property");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRelationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRelationRelationParserRuleCall_0_0 = (RuleCall)cRelationAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cClassTypeAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final CrossReference cClassTypeEntityCrossReference_3_0_0 = (CrossReference)cClassTypeAssignment_3_0.eContents().get(0);
		private final RuleCall cClassTypeEntityQualifiedNameParserRuleCall_3_0_0_1 = (RuleCall)cClassTypeEntityCrossReference_3_0_0.eContents().get(1);
		private final Assignment cTypeAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cTypeDATATYPETerminalRuleCall_3_1_0 = (RuleCall)cTypeAssignment_3_1.eContents().get(0);
		private final Assignment cArrayAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Keyword cArrayLeftSquareBracketRightSquareBracketKeyword_4_0 = (Keyword)cArrayAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Property:
		//	relation=Relation?
		//	name=ID ':' (classType=[Entity|QualifiedName] | type=DATATYPE) array='[]'? ';'?;
		@Override public ParserRule getRule() { return rule; }
		
		//relation=Relation? name=ID ':' (classType=[Entity|QualifiedName] | type=DATATYPE) array='[]'? ';'?
		public Group getGroup() { return cGroup; }
		
		//relation=Relation?
		public Assignment getRelationAssignment_0() { return cRelationAssignment_0; }
		
		//Relation
		public RuleCall getRelationRelationParserRuleCall_0_0() { return cRelationRelationParserRuleCall_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//classType=[Entity|QualifiedName] | type=DATATYPE
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//classType=[Entity|QualifiedName]
		public Assignment getClassTypeAssignment_3_0() { return cClassTypeAssignment_3_0; }
		
		//[Entity|QualifiedName]
		public CrossReference getClassTypeEntityCrossReference_3_0_0() { return cClassTypeEntityCrossReference_3_0_0; }
		
		//QualifiedName
		public RuleCall getClassTypeEntityQualifiedNameParserRuleCall_3_0_0_1() { return cClassTypeEntityQualifiedNameParserRuleCall_3_0_0_1; }
		
		//type=DATATYPE
		public Assignment getTypeAssignment_3_1() { return cTypeAssignment_3_1; }
		
		//DATATYPE
		public RuleCall getTypeDATATYPETerminalRuleCall_3_1_0() { return cTypeDATATYPETerminalRuleCall_3_1_0; }
		
		//array='[]'?
		public Assignment getArrayAssignment_4() { return cArrayAssignment_4; }
		
		//'[]'
		public Keyword getArrayLeftSquareBracketRightSquareBracketKeyword_4_0() { return cArrayLeftSquareBracketRightSquareBracketKeyword_4_0; }
		
		//';'?
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class DtoPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "prodest.es.gov.br.dsl.NestDsl.DtoProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cClassTypeAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final CrossReference cClassTypeDtoCrossReference_2_0_0 = (CrossReference)cClassTypeAssignment_2_0.eContents().get(0);
		private final RuleCall cClassTypeDtoQualifiedNameParserRuleCall_2_0_0_1 = (RuleCall)cClassTypeDtoCrossReference_2_0_0.eContents().get(1);
		private final Assignment cTypeAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cTypeDATATYPETerminalRuleCall_2_1_0 = (RuleCall)cTypeAssignment_2_1.eContents().get(0);
		private final Assignment cArrayAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cArrayLeftSquareBracketRightSquareBracketKeyword_3_0 = (Keyword)cArrayAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DtoProperty:
		//	name=ID ':' (classType=[Dto|QualifiedName] | type=DATATYPE) array='[]'? ';'?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' (classType=[Dto|QualifiedName] | type=DATATYPE) array='[]'? ';'?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//classType=[Dto|QualifiedName] | type=DATATYPE
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//classType=[Dto|QualifiedName]
		public Assignment getClassTypeAssignment_2_0() { return cClassTypeAssignment_2_0; }
		
		//[Dto|QualifiedName]
		public CrossReference getClassTypeDtoCrossReference_2_0_0() { return cClassTypeDtoCrossReference_2_0_0; }
		
		//QualifiedName
		public RuleCall getClassTypeDtoQualifiedNameParserRuleCall_2_0_0_1() { return cClassTypeDtoQualifiedNameParserRuleCall_2_0_0_1; }
		
		//type=DATATYPE
		public Assignment getTypeAssignment_2_1() { return cTypeAssignment_2_1; }
		
		//DATATYPE
		public RuleCall getTypeDATATYPETerminalRuleCall_2_1_0() { return cTypeDATATYPETerminalRuleCall_2_1_0; }
		
		//array='[]'?
		public Assignment getArrayAssignment_3() { return cArrayAssignment_3; }
		
		//'[]'
		public Keyword getArrayLeftSquareBracketRightSquareBracketKeyword_3_0() { return cArrayLeftSquareBracketRightSquareBracketKeyword_3_0; }
		
		//';'?
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class RelationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "prodest.es.gov.br.dsl.NestDsl.Relation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cOneArgumentAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cOneArgumentOneArgumentRelationParserRuleCall_0_0 = (RuleCall)cOneArgumentAssignment_0.eContents().get(0);
		private final Assignment cMultipleArgumentAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cMultipleArgumentMultipleArgumentRelationParserRuleCall_1_0 = (RuleCall)cMultipleArgumentAssignment_1.eContents().get(0);
		
		//Relation:
		//	oneArgument=OneArgumentRelation | multipleArgument=MultipleArgumentRelation;
		@Override public ParserRule getRule() { return rule; }
		
		//oneArgument=OneArgumentRelation | multipleArgument=MultipleArgumentRelation
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//oneArgument=OneArgumentRelation
		public Assignment getOneArgumentAssignment_0() { return cOneArgumentAssignment_0; }
		
		//OneArgumentRelation
		public RuleCall getOneArgumentOneArgumentRelationParserRuleCall_0_0() { return cOneArgumentOneArgumentRelationParserRuleCall_0_0; }
		
		//multipleArgument=MultipleArgumentRelation
		public Assignment getMultipleArgumentAssignment_1() { return cMultipleArgumentAssignment_1; }
		
		//MultipleArgumentRelation
		public RuleCall getMultipleArgumentMultipleArgumentRelationParserRuleCall_1_0() { return cMultipleArgumentMultipleArgumentRelationParserRuleCall_1_0; }
	}
	public class OneArgumentRelationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "prodest.es.gov.br.dsl.NestDsl.OneArgumentRelation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cArgumentAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cArgumentAlternatives_0_0 = (Alternatives)cArgumentAssignment_0.eContents().get(0);
		private final Keyword cArgumentOneToOneKeyword_0_0_0 = (Keyword)cArgumentAlternatives_0_0.eContents().get(0);
		private final Keyword cArgumentManyToManyKeyword_0_0_1 = (Keyword)cArgumentAlternatives_0_0.eContents().get(1);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTypeEntityCrossReference_1_0 = (CrossReference)cTypeAssignment_1.eContents().get(0);
		private final RuleCall cTypeEntityIDTerminalRuleCall_1_0_1 = (RuleCall)cTypeEntityCrossReference_1_0.eContents().get(1);
		
		//OneArgumentRelation:
		//	argument=('OneToOne' | 'ManyToMany') type=[Entity];
		@Override public ParserRule getRule() { return rule; }
		
		//argument=('OneToOne' | 'ManyToMany') type=[Entity]
		public Group getGroup() { return cGroup; }
		
		//argument=('OneToOne' | 'ManyToMany')
		public Assignment getArgumentAssignment_0() { return cArgumentAssignment_0; }
		
		//('OneToOne' | 'ManyToMany')
		public Alternatives getArgumentAlternatives_0_0() { return cArgumentAlternatives_0_0; }
		
		//'OneToOne'
		public Keyword getArgumentOneToOneKeyword_0_0_0() { return cArgumentOneToOneKeyword_0_0_0; }
		
		//'ManyToMany'
		public Keyword getArgumentManyToManyKeyword_0_0_1() { return cArgumentManyToManyKeyword_0_0_1; }
		
		//type=[Entity]
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//[Entity]
		public CrossReference getTypeEntityCrossReference_1_0() { return cTypeEntityCrossReference_1_0; }
		
		//ID
		public RuleCall getTypeEntityIDTerminalRuleCall_1_0_1() { return cTypeEntityIDTerminalRuleCall_1_0_1; }
	}
	public class MultipleArgumentRelationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "prodest.es.gov.br.dsl.NestDsl.MultipleArgumentRelation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cArgumentAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cArgumentAlternatives_0_0 = (Alternatives)cArgumentAssignment_0.eContents().get(0);
		private final Keyword cArgumentManyToOneKeyword_0_0_0 = (Keyword)cArgumentAlternatives_0_0.eContents().get(0);
		private final Keyword cArgumentOneToManyKeyword_0_0_1 = (Keyword)cArgumentAlternatives_0_0.eContents().get(1);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTypeEntityCrossReference_1_0 = (CrossReference)cTypeAssignment_1.eContents().get(0);
		private final RuleCall cTypeEntityIDTerminalRuleCall_1_0_1 = (RuleCall)cTypeEntityCrossReference_1_0.eContents().get(1);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSecondArgumentAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSecondArgumentARGUMENTREGEXTerminalRuleCall_3_0 = (RuleCall)cSecondArgumentAssignment_3.eContents().get(0);
		
		//MultipleArgumentRelation:
		//	argument=('ManyToOne' | 'OneToMany') type=[Entity] ',' secondArgument=ARGUMENTREGEX;
		@Override public ParserRule getRule() { return rule; }
		
		//argument=('ManyToOne' | 'OneToMany') type=[Entity] ',' secondArgument=ARGUMENTREGEX
		public Group getGroup() { return cGroup; }
		
		//argument=('ManyToOne' | 'OneToMany')
		public Assignment getArgumentAssignment_0() { return cArgumentAssignment_0; }
		
		//('ManyToOne' | 'OneToMany')
		public Alternatives getArgumentAlternatives_0_0() { return cArgumentAlternatives_0_0; }
		
		//'ManyToOne'
		public Keyword getArgumentManyToOneKeyword_0_0_0() { return cArgumentManyToOneKeyword_0_0_0; }
		
		//'OneToMany'
		public Keyword getArgumentOneToManyKeyword_0_0_1() { return cArgumentOneToManyKeyword_0_0_1; }
		
		//type=[Entity]
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//[Entity]
		public CrossReference getTypeEntityCrossReference_1_0() { return cTypeEntityCrossReference_1_0; }
		
		//ID
		public RuleCall getTypeEntityIDTerminalRuleCall_1_0_1() { return cTypeEntityIDTerminalRuleCall_1_0_1; }
		
		//','
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//secondArgument=ARGUMENTREGEX
		public Assignment getSecondArgumentAssignment_3() { return cSecondArgumentAssignment_3; }
		
		//ARGUMENTREGEX
		public RuleCall getSecondArgumentARGUMENTREGEXTerminalRuleCall_3_0() { return cSecondArgumentARGUMENTREGEXTerminalRuleCall_3_0; }
	}
	public class MethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "prodest.es.gov.br.dsl.NestDsl.Method");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVerbAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cVerbAlternatives_0_0 = (Alternatives)cVerbAssignment_0.eContents().get(0);
		private final Keyword cVerbGetKeyword_0_0_0 = (Keyword)cVerbAlternatives_0_0.eContents().get(0);
		private final Keyword cVerbPostKeyword_0_0_1 = (Keyword)cVerbAlternatives_0_0.eContents().get(1);
		private final Keyword cVerbDeleteKeyword_0_0_2 = (Keyword)cVerbAlternatives_0_0.eContents().get(2);
		private final Keyword cVerbPutKeyword_0_0_3 = (Keyword)cVerbAlternatives_0_0.eContents().get(3);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cArgsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cArgsMethodArgParserRuleCall_3_0_0 = (RuleCall)cArgsAssignment_3_0.eContents().get(0);
		private final Keyword cCommaKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Keyword cRightParenthesisColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Assignment cReturnClassTypeAssignment_5_0 = (Assignment)cAlternatives_5.eContents().get(0);
		private final CrossReference cReturnClassTypeAbstractElementCrossReference_5_0_0 = (CrossReference)cReturnClassTypeAssignment_5_0.eContents().get(0);
		private final RuleCall cReturnClassTypeAbstractElementQualifiedNameParserRuleCall_5_0_0_1 = (RuleCall)cReturnClassTypeAbstractElementCrossReference_5_0_0.eContents().get(1);
		private final Assignment cReturnTypeAssignment_5_1 = (Assignment)cAlternatives_5.eContents().get(1);
		private final RuleCall cReturnTypeDATATYPETerminalRuleCall_5_1_0 = (RuleCall)cReturnTypeAssignment_5_1.eContents().get(0);
		private final Assignment cArrayAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final Keyword cArrayLeftSquareBracketRightSquareBracketKeyword_6_0 = (Keyword)cArrayAssignment_6.eContents().get(0);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Method:
		//	verb=('Get' | 'Post' | 'Delete' | 'Put') name=ID '(' (args+=MethodArg ','?)* '):'
		//	(returnClassType=[AbstractElement|QualifiedName] | returnType=DATATYPE) array='[]'? ';'?;
		@Override public ParserRule getRule() { return rule; }
		
		//verb=('Get' | 'Post' | 'Delete' | 'Put') name=ID '(' (args+=MethodArg ','?)* '):'
		//(returnClassType=[AbstractElement|QualifiedName] | returnType=DATATYPE) array='[]'? ';'?
		public Group getGroup() { return cGroup; }
		
		//verb=('Get' | 'Post' | 'Delete' | 'Put')
		public Assignment getVerbAssignment_0() { return cVerbAssignment_0; }
		
		//('Get' | 'Post' | 'Delete' | 'Put')
		public Alternatives getVerbAlternatives_0_0() { return cVerbAlternatives_0_0; }
		
		//'Get'
		public Keyword getVerbGetKeyword_0_0_0() { return cVerbGetKeyword_0_0_0; }
		
		//'Post'
		public Keyword getVerbPostKeyword_0_0_1() { return cVerbPostKeyword_0_0_1; }
		
		//'Delete'
		public Keyword getVerbDeleteKeyword_0_0_2() { return cVerbDeleteKeyword_0_0_2; }
		
		//'Put'
		public Keyword getVerbPutKeyword_0_0_3() { return cVerbPutKeyword_0_0_3; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//(args+=MethodArg ','?)*
		public Group getGroup_3() { return cGroup_3; }
		
		//args+=MethodArg
		public Assignment getArgsAssignment_3_0() { return cArgsAssignment_3_0; }
		
		//MethodArg
		public RuleCall getArgsMethodArgParserRuleCall_3_0_0() { return cArgsMethodArgParserRuleCall_3_0_0; }
		
		//','?
		public Keyword getCommaKeyword_3_1() { return cCommaKeyword_3_1; }
		
		//'):'
		public Keyword getRightParenthesisColonKeyword_4() { return cRightParenthesisColonKeyword_4; }
		
		//returnClassType=[AbstractElement|QualifiedName] | returnType=DATATYPE
		public Alternatives getAlternatives_5() { return cAlternatives_5; }
		
		//returnClassType=[AbstractElement|QualifiedName]
		public Assignment getReturnClassTypeAssignment_5_0() { return cReturnClassTypeAssignment_5_0; }
		
		//[AbstractElement|QualifiedName]
		public CrossReference getReturnClassTypeAbstractElementCrossReference_5_0_0() { return cReturnClassTypeAbstractElementCrossReference_5_0_0; }
		
		//QualifiedName
		public RuleCall getReturnClassTypeAbstractElementQualifiedNameParserRuleCall_5_0_0_1() { return cReturnClassTypeAbstractElementQualifiedNameParserRuleCall_5_0_0_1; }
		
		//returnType=DATATYPE
		public Assignment getReturnTypeAssignment_5_1() { return cReturnTypeAssignment_5_1; }
		
		//DATATYPE
		public RuleCall getReturnTypeDATATYPETerminalRuleCall_5_1_0() { return cReturnTypeDATATYPETerminalRuleCall_5_1_0; }
		
		//array='[]'?
		public Assignment getArrayAssignment_6() { return cArrayAssignment_6; }
		
		//'[]'
		public Keyword getArrayLeftSquareBracketRightSquareBracketKeyword_6_0() { return cArrayLeftSquareBracketRightSquareBracketKeyword_6_0; }
		
		//';'?
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
	}
	public class MethodArgElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "prodest.es.gov.br.dsl.NestDsl.MethodArg");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cClassTypeAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final CrossReference cClassTypeAbstractElementCrossReference_2_0_0 = (CrossReference)cClassTypeAssignment_2_0.eContents().get(0);
		private final RuleCall cClassTypeAbstractElementQualifiedNameParserRuleCall_2_0_0_1 = (RuleCall)cClassTypeAbstractElementCrossReference_2_0_0.eContents().get(1);
		private final Assignment cTypeAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cTypeDATATYPETerminalRuleCall_2_1_0 = (RuleCall)cTypeAssignment_2_1.eContents().get(0);
		private final Assignment cArrayAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cArrayLeftSquareBracketRightSquareBracketKeyword_3_0 = (Keyword)cArrayAssignment_3.eContents().get(0);
		
		//MethodArg:
		//	name=ID ':' (classType=[AbstractElement|QualifiedName] | type=DATATYPE) array='[]'?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' (classType=[AbstractElement|QualifiedName] | type=DATATYPE) array='[]'?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//classType=[AbstractElement|QualifiedName] | type=DATATYPE
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//classType=[AbstractElement|QualifiedName]
		public Assignment getClassTypeAssignment_2_0() { return cClassTypeAssignment_2_0; }
		
		//[AbstractElement|QualifiedName]
		public CrossReference getClassTypeAbstractElementCrossReference_2_0_0() { return cClassTypeAbstractElementCrossReference_2_0_0; }
		
		//QualifiedName
		public RuleCall getClassTypeAbstractElementQualifiedNameParserRuleCall_2_0_0_1() { return cClassTypeAbstractElementQualifiedNameParserRuleCall_2_0_0_1; }
		
		//type=DATATYPE
		public Assignment getTypeAssignment_2_1() { return cTypeAssignment_2_1; }
		
		//DATATYPE
		public RuleCall getTypeDATATYPETerminalRuleCall_2_1_0() { return cTypeDATATYPETerminalRuleCall_2_1_0; }
		
		//array='[]'?
		public Assignment getArrayAssignment_3() { return cArrayAssignment_3; }
		
		//'[]'
		public Keyword getArrayLeftSquareBracketRightSquareBracketKeyword_3_0() { return cArrayLeftSquareBracketRightSquareBracketKeyword_3_0; }
	}
	
	
	private final DomainmodelElements pDomainmodel;
	private final AbstractElementElements pAbstractElement;
	private final EntityElements pEntity;
	private final DtoElements pDto;
	private final TerminalRule tDATATYPE;
	private final QualifiedNameElements pQualifiedName;
	private final PropertyElements pProperty;
	private final DtoPropertyElements pDtoProperty;
	private final RelationElements pRelation;
	private final OneArgumentRelationElements pOneArgumentRelation;
	private final MultipleArgumentRelationElements pMultipleArgumentRelation;
	private final TerminalRule tARGUMENTREGEX;
	private final MethodElements pMethod;
	private final MethodArgElements pMethodArg;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public NestDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pDomainmodel = new DomainmodelElements();
		this.pAbstractElement = new AbstractElementElements();
		this.pEntity = new EntityElements();
		this.pDto = new DtoElements();
		this.tDATATYPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "prodest.es.gov.br.dsl.NestDsl.DATATYPE");
		this.pQualifiedName = new QualifiedNameElements();
		this.pProperty = new PropertyElements();
		this.pDtoProperty = new DtoPropertyElements();
		this.pRelation = new RelationElements();
		this.pOneArgumentRelation = new OneArgumentRelationElements();
		this.pMultipleArgumentRelation = new MultipleArgumentRelationElements();
		this.tARGUMENTREGEX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "prodest.es.gov.br.dsl.NestDsl.ARGUMENTREGEX");
		this.pMethod = new MethodElements();
		this.pMethodArg = new MethodArgElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("prodest.es.gov.br.dsl.NestDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Domainmodel:
	//	elements+=AbstractElement*;
	public DomainmodelElements getDomainmodelAccess() {
		return pDomainmodel;
	}
	
	public ParserRule getDomainmodelRule() {
		return getDomainmodelAccess().getRule();
	}
	
	//AbstractElement:
	//	Entity | Dto;
	public AbstractElementElements getAbstractElementAccess() {
		return pAbstractElement;
	}
	
	public ParserRule getAbstractElementRule() {
		return getAbstractElementAccess().getRule();
	}
	
	//Entity:
	//	'entity' name=ID ('extends' superType=[Entity|QualifiedName])? '{'
	//	properties+=Property*
	//	methods+=Method*
	//	'}';
	public EntityElements getEntityAccess() {
		return pEntity;
	}
	
	public ParserRule getEntityRule() {
		return getEntityAccess().getRule();
	}
	
	//Dto:
	//	'dto' name=ID ('extends' superType=[Dto|QualifiedName])? '{'
	//	properties+=DtoProperty*
	//	'}';
	public DtoElements getDtoAccess() {
		return pDto;
	}
	
	public ParserRule getDtoRule() {
		return getDtoAccess().getRule();
	}
	
	//terminal DATATYPE:
	//	'string' | 'number' | 'Date' | 'boolean';
	public TerminalRule getDATATYPERule() {
		return tDATATYPE;
	}
	
	//QualifiedName:
	//	ID;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//Property:
	//	relation=Relation?
	//	name=ID ':' (classType=[Entity|QualifiedName] | type=DATATYPE) array='[]'? ';'?;
	public PropertyElements getPropertyAccess() {
		return pProperty;
	}
	
	public ParserRule getPropertyRule() {
		return getPropertyAccess().getRule();
	}
	
	//DtoProperty:
	//	name=ID ':' (classType=[Dto|QualifiedName] | type=DATATYPE) array='[]'? ';'?;
	public DtoPropertyElements getDtoPropertyAccess() {
		return pDtoProperty;
	}
	
	public ParserRule getDtoPropertyRule() {
		return getDtoPropertyAccess().getRule();
	}
	
	//Relation:
	//	oneArgument=OneArgumentRelation | multipleArgument=MultipleArgumentRelation;
	public RelationElements getRelationAccess() {
		return pRelation;
	}
	
	public ParserRule getRelationRule() {
		return getRelationAccess().getRule();
	}
	
	//OneArgumentRelation:
	//	argument=('OneToOne' | 'ManyToMany') type=[Entity];
	public OneArgumentRelationElements getOneArgumentRelationAccess() {
		return pOneArgumentRelation;
	}
	
	public ParserRule getOneArgumentRelationRule() {
		return getOneArgumentRelationAccess().getRule();
	}
	
	//MultipleArgumentRelation:
	//	argument=('ManyToOne' | 'OneToMany') type=[Entity] ',' secondArgument=ARGUMENTREGEX;
	public MultipleArgumentRelationElements getMultipleArgumentRelationAccess() {
		return pMultipleArgumentRelation;
	}
	
	public ParserRule getMultipleArgumentRelationRule() {
		return getMultipleArgumentRelationAccess().getRule();
	}
	
	//terminal ARGUMENTREGEX:
	//	('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')* '=>' ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' |
	//	'A'..'Z' | '_' | '0'..'9')* '.' ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getARGUMENTREGEXRule() {
		return tARGUMENTREGEX;
	}
	
	//Method:
	//	verb=('Get' | 'Post' | 'Delete' | 'Put') name=ID '(' (args+=MethodArg ','?)* '):'
	//	(returnClassType=[AbstractElement|QualifiedName] | returnType=DATATYPE) array='[]'? ';'?;
	public MethodElements getMethodAccess() {
		return pMethod;
	}
	
	public ParserRule getMethodRule() {
		return getMethodAccess().getRule();
	}
	
	//MethodArg:
	//	name=ID ':' (classType=[AbstractElement|QualifiedName] | type=DATATYPE) array='[]'?;
	public MethodArgElements getMethodArgAccess() {
		return pMethodArg;
	}
	
	public ParserRule getMethodArgRule() {
		return getMethodArgAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
