/**
 * generated by XText 2.17.0
 */
package prodest.es.gov.br.dsl.nestdsl.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import prodest.es.gov.br.dsl.nestdsl.MultipleArgumentRelation;
import prodest.es.gov.br.dsl.nestdsl.NestdslPackage;
import prodest.es.gov.br.dsl.nestdsl.OneArgumentRelation;
import prodest.es.gov.br.dsl.nestdsl.Relation;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Relation</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link prodest.es.gov.br.dsl.nestdsl.impl.RelationImpl#getOneArgument <em>One Argument</em>}</li>
 *   <li>{@link prodest.es.gov.br.dsl.nestdsl.impl.RelationImpl#getMultipleArgument <em>Multiple Argument</em>}</li>
 * </ul>
 *
 * @generated
 */
public class RelationImpl extends MinimalEObjectImpl.Container implements Relation
{
  /**
   * The cached value of the '{@link #getOneArgument() <em>One Argument</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOneArgument()
   * @generated
   * @ordered
   */
  protected OneArgumentRelation oneArgument;

  /**
   * The cached value of the '{@link #getMultipleArgument() <em>Multiple Argument</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMultipleArgument()
   * @generated
   * @ordered
   */
  protected MultipleArgumentRelation multipleArgument;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected RelationImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return NestdslPackage.Literals.RELATION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OneArgumentRelation getOneArgument()
  {
    return oneArgument;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetOneArgument(OneArgumentRelation newOneArgument, NotificationChain msgs)
  {
    OneArgumentRelation oldOneArgument = oneArgument;
    oneArgument = newOneArgument;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, NestdslPackage.RELATION__ONE_ARGUMENT, oldOneArgument, newOneArgument);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOneArgument(OneArgumentRelation newOneArgument)
  {
    if (newOneArgument != oneArgument)
    {
      NotificationChain msgs = null;
      if (oneArgument != null)
        msgs = ((InternalEObject)oneArgument).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - NestdslPackage.RELATION__ONE_ARGUMENT, null, msgs);
      if (newOneArgument != null)
        msgs = ((InternalEObject)newOneArgument).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - NestdslPackage.RELATION__ONE_ARGUMENT, null, msgs);
      msgs = basicSetOneArgument(newOneArgument, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, NestdslPackage.RELATION__ONE_ARGUMENT, newOneArgument, newOneArgument));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MultipleArgumentRelation getMultipleArgument()
  {
    return multipleArgument;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetMultipleArgument(MultipleArgumentRelation newMultipleArgument, NotificationChain msgs)
  {
    MultipleArgumentRelation oldMultipleArgument = multipleArgument;
    multipleArgument = newMultipleArgument;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, NestdslPackage.RELATION__MULTIPLE_ARGUMENT, oldMultipleArgument, newMultipleArgument);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMultipleArgument(MultipleArgumentRelation newMultipleArgument)
  {
    if (newMultipleArgument != multipleArgument)
    {
      NotificationChain msgs = null;
      if (multipleArgument != null)
        msgs = ((InternalEObject)multipleArgument).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - NestdslPackage.RELATION__MULTIPLE_ARGUMENT, null, msgs);
      if (newMultipleArgument != null)
        msgs = ((InternalEObject)newMultipleArgument).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - NestdslPackage.RELATION__MULTIPLE_ARGUMENT, null, msgs);
      msgs = basicSetMultipleArgument(newMultipleArgument, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, NestdslPackage.RELATION__MULTIPLE_ARGUMENT, newMultipleArgument, newMultipleArgument));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case NestdslPackage.RELATION__ONE_ARGUMENT:
        return basicSetOneArgument(null, msgs);
      case NestdslPackage.RELATION__MULTIPLE_ARGUMENT:
        return basicSetMultipleArgument(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case NestdslPackage.RELATION__ONE_ARGUMENT:
        return getOneArgument();
      case NestdslPackage.RELATION__MULTIPLE_ARGUMENT:
        return getMultipleArgument();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case NestdslPackage.RELATION__ONE_ARGUMENT:
        setOneArgument((OneArgumentRelation)newValue);
        return;
      case NestdslPackage.RELATION__MULTIPLE_ARGUMENT:
        setMultipleArgument((MultipleArgumentRelation)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case NestdslPackage.RELATION__ONE_ARGUMENT:
        setOneArgument((OneArgumentRelation)null);
        return;
      case NestdslPackage.RELATION__MULTIPLE_ARGUMENT:
        setMultipleArgument((MultipleArgumentRelation)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case NestdslPackage.RELATION__ONE_ARGUMENT:
        return oneArgument != null;
      case NestdslPackage.RELATION__MULTIPLE_ARGUMENT:
        return multipleArgument != null;
    }
    return super.eIsSet(featureID);
  }

} //RelationImpl
