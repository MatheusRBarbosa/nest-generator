/*
 * generated by XText 2.19.0
 */
package prodest.es.gov.br.dsl.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import prodest.es.gov.br.dsl.services.NestDslGrammarAccess;

@SuppressWarnings("all")
public class NestDslSyntacticSequencer extends AbstractSyntacticSequencer {

	protected NestDslGrammarAccess grammarAccess;
	protected AbstractElementAlias match_DtoProperty_SemicolonKeyword_4_q;
	protected AbstractElementAlias match_Method_CommaKeyword_3_1_q;
	protected AbstractElementAlias match_Method_SemicolonKeyword_7_q;
	protected AbstractElementAlias match_Property_SemicolonKeyword_5_q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (NestDslGrammarAccess) access;
		match_DtoProperty_SemicolonKeyword_4_q = new TokenAlias(false, true, grammarAccess.getDtoPropertyAccess().getSemicolonKeyword_4());
		match_Method_CommaKeyword_3_1_q = new TokenAlias(false, true, grammarAccess.getMethodAccess().getCommaKeyword_3_1());
		match_Method_SemicolonKeyword_7_q = new TokenAlias(false, true, grammarAccess.getMethodAccess().getSemicolonKeyword_7());
		match_Property_SemicolonKeyword_5_q = new TokenAlias(false, true, grammarAccess.getPropertyAccess().getSemicolonKeyword_5());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_DtoProperty_SemicolonKeyword_4_q.equals(syntax))
				emit_DtoProperty_SemicolonKeyword_4_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Method_CommaKeyword_3_1_q.equals(syntax))
				emit_Method_CommaKeyword_3_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Method_SemicolonKeyword_7_q.equals(syntax))
				emit_Method_SemicolonKeyword_7_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Property_SemicolonKeyword_5_q.equals(syntax))
				emit_Property_SemicolonKeyword_5_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     array='[]' (ambiguity) (rule end)
	 *     classType=[Dto|QualifiedName] (ambiguity) (rule end)
	 *     type=DATATYPE (ambiguity) (rule end)
	 */
	protected void emit_DtoProperty_SemicolonKeyword_4_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     args+=MethodArg (ambiguity) '):' returnClassType=[AbstractElement|QualifiedName]
	 *     args+=MethodArg (ambiguity) '):' returnType=DATATYPE
	 *     args+=MethodArg (ambiguity) args+=MethodArg
	 */
	protected void emit_Method_CommaKeyword_3_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     array='[]' (ambiguity) (rule end)
	 *     returnClassType=[AbstractElement|QualifiedName] (ambiguity) (rule end)
	 *     returnType=DATATYPE (ambiguity) (rule end)
	 */
	protected void emit_Method_SemicolonKeyword_7_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     array='[]' (ambiguity) '{' propertyOptions=PropertyOptions
	 *     array='[]' (ambiguity) (rule end)
	 *     classType=[Entity|QualifiedName] (ambiguity) '{' propertyOptions=PropertyOptions
	 *     classType=[Entity|QualifiedName] (ambiguity) (rule end)
	 *     type=DATATYPE (ambiguity) '{' propertyOptions=PropertyOptions
	 *     type=DATATYPE (ambiguity) (rule end)
	 */
	protected void emit_Property_SemicolonKeyword_5_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
