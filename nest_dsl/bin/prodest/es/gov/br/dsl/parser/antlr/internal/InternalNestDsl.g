/*
 * generated by XText 2.19.0
 */
grammar InternalNestDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package prodest.es.gov.br.dsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package prodest.es.gov.br.dsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import prodest.es.gov.br.dsl.services.NestDslGrammarAccess;

}

@parser::members {

 	private NestDslGrammarAccess grammarAccess;

    public InternalNestDslParser(TokenStream input, NestDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Domainmodel";
   	}

   	@Override
   	protected NestDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleDomainmodel
entryRuleDomainmodel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDomainmodelRule()); }
	iv_ruleDomainmodel=ruleDomainmodel
	{ $current=$iv_ruleDomainmodel.current; }
	EOF;

// Rule Domainmodel
ruleDomainmodel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getDomainmodelAccess().getElementsAbstractElementParserRuleCall_0());
			}
			lv_elements_0_0=ruleAbstractElement
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getDomainmodelRule());
				}
				add(
					$current,
					"elements",
					lv_elements_0_0,
					"prodest.es.gov.br.dsl.NestDsl.AbstractElement");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleAbstractElement
entryRuleAbstractElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAbstractElementRule()); }
	iv_ruleAbstractElement=ruleAbstractElement
	{ $current=$iv_ruleAbstractElement.current; }
	EOF;

// Rule AbstractElement
ruleAbstractElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAbstractElementAccess().getEntityParserRuleCall_0());
		}
		this_Entity_0=ruleEntity
		{
			$current = $this_Entity_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAbstractElementAccess().getDtoParserRuleCall_1());
		}
		this_Dto_1=ruleDto
		{
			$current = $this_Dto_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleDescription
entryRuleDescription returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDescriptionRule()); }
	iv_ruleDescription=ruleDescription
	{ $current=$iv_ruleDescription.current; }
	EOF;

// Rule Description
ruleDescription returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='#'
		{
			newLeafNode(otherlv_0, grammarAccess.getDescriptionAccess().getNumberSignKeyword_0());
		}
		(
			(
				lv_textfield_1_0=RULE_STRING
				{
					newLeafNode(lv_textfield_1_0, grammarAccess.getDescriptionAccess().getTextfieldSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDescriptionRule());
					}
					setWithLastConsumed(
						$current,
						"textfield",
						lv_textfield_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleEntity
entryRuleEntity returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEntityRule()); }
	iv_ruleEntity=ruleEntity
	{ $current=$iv_ruleEntity.current; }
	EOF;

// Rule Entity
ruleEntity returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getEntityAccess().getDescriptionDescriptionParserRuleCall_0_0());
				}
				lv_description_0_0=ruleDescription
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEntityRule());
					}
					set(
						$current,
						"description",
						lv_description_0_0,
						"prodest.es.gov.br.dsl.NestDsl.Description");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_1='entity'
		{
			newLeafNode(otherlv_1, grammarAccess.getEntityAccess().getEntityKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getEntityAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEntityRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_3='extends'
			{
				newLeafNode(otherlv_3, grammarAccess.getEntityAccess().getExtendsKeyword_3_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getEntityRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getEntityAccess().getSuperTypeEntityCrossReference_3_1_0());
					}
					ruleQualifiedName
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_5='{'
		{
			newLeafNode(otherlv_5, grammarAccess.getEntityAccess().getLeftCurlyBracketKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getEntityAccess().getPropertiesPropertyParserRuleCall_5_0());
				}
				lv_properties_6_0=ruleProperty
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEntityRule());
					}
					add(
						$current,
						"properties",
						lv_properties_6_0,
						"prodest.es.gov.br.dsl.NestDsl.Property");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getEntityAccess().getMethodsMethodParserRuleCall_6_0());
				}
				lv_methods_7_0=ruleMethod
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEntityRule());
					}
					add(
						$current,
						"methods",
						lv_methods_7_0,
						"prodest.es.gov.br.dsl.NestDsl.Method");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_8='}'
		{
			newLeafNode(otherlv_8, grammarAccess.getEntityAccess().getRightCurlyBracketKeyword_7());
		}
	)
;

// Entry rule entryRuleDto
entryRuleDto returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDtoRule()); }
	iv_ruleDto=ruleDto
	{ $current=$iv_ruleDto.current; }
	EOF;

// Rule Dto
ruleDto returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getDtoAccess().getDescriptionDescriptionParserRuleCall_0_0());
				}
				lv_description_0_0=ruleDescription
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDtoRule());
					}
					set(
						$current,
						"description",
						lv_description_0_0,
						"prodest.es.gov.br.dsl.NestDsl.Description");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_1='dto'
		{
			newLeafNode(otherlv_1, grammarAccess.getDtoAccess().getDtoKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getDtoAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDtoRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_3='extends'
			{
				newLeafNode(otherlv_3, grammarAccess.getDtoAccess().getExtendsKeyword_3_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDtoRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getDtoAccess().getSuperTypeDtoCrossReference_3_1_0());
					}
					ruleQualifiedName
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_5='{'
		{
			newLeafNode(otherlv_5, grammarAccess.getDtoAccess().getLeftCurlyBracketKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDtoAccess().getPropertiesDtoPropertyParserRuleCall_5_0());
				}
				lv_properties_6_0=ruleDtoProperty
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDtoRule());
					}
					add(
						$current,
						"properties",
						lv_properties_6_0,
						"prodest.es.gov.br.dsl.NestDsl.DtoProperty");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_7='}'
		{
			newLeafNode(otherlv_7, grammarAccess.getDtoAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null]:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); }
	iv_ruleQualifiedName=ruleQualifiedName
	{ $current=$iv_ruleQualifiedName.current.getText(); }
	EOF;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	this_ID_0=RULE_ID
	{
		$current.merge(this_ID_0);
	}
	{
		newLeafNode(this_ID_0, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall());
	}
;

// Entry rule entryRuleProperty
entryRuleProperty returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPropertyRule()); }
	iv_ruleProperty=ruleProperty
	{ $current=$iv_ruleProperty.current; }
	EOF;

// Rule Property
ruleProperty returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getPropertyAccess().getRelationRelationParserRuleCall_0_0());
				}
				lv_relation_0_0=ruleRelation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPropertyRule());
					}
					set(
						$current,
						"relation",
						lv_relation_0_0,
						"prodest.es.gov.br.dsl.NestDsl.Relation");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getPropertyAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPropertyRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getPropertyAccess().getColonKeyword_2());
		}
		(
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getPropertyRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getPropertyAccess().getClassTypeEntityCrossReference_3_0_0());
					}
					ruleQualifiedName
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					lv_type_4_0=RULE_DATATYPE
					{
						newLeafNode(lv_type_4_0, grammarAccess.getPropertyAccess().getTypeDATATYPETerminalRuleCall_3_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getPropertyRule());
						}
						setWithLastConsumed(
							$current,
							"type",
							lv_type_4_0,
							"prodest.es.gov.br.dsl.NestDsl.DATATYPE");
					}
				)
			)
		)
		(
			(
				lv_array_5_0='[]'
				{
					newLeafNode(lv_array_5_0, grammarAccess.getPropertyAccess().getArrayLeftSquareBracketRightSquareBracketKeyword_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPropertyRule());
					}
					setWithLastConsumed($current, "array", lv_array_5_0, "[]");
				}
			)
		)?
		(
			otherlv_6=';'
			{
				newLeafNode(otherlv_6, grammarAccess.getPropertyAccess().getSemicolonKeyword_5());
			}
		)?
		(
			otherlv_7='{'
			{
				newLeafNode(otherlv_7, grammarAccess.getPropertyAccess().getLeftCurlyBracketKeyword_6_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPropertyAccess().getPropertyOptionsPropertyOptionsParserRuleCall_6_1_0());
					}
					lv_propertyOptions_8_0=rulePropertyOptions
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPropertyRule());
						}
						set(
							$current,
							"propertyOptions",
							lv_propertyOptions_8_0,
							"prodest.es.gov.br.dsl.NestDsl.PropertyOptions");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_9='}'
			{
				newLeafNode(otherlv_9, grammarAccess.getPropertyAccess().getRightCurlyBracketKeyword_6_2());
			}
		)?
	)
;

// Entry rule entryRuleDtoProperty
entryRuleDtoProperty returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDtoPropertyRule()); }
	iv_ruleDtoProperty=ruleDtoProperty
	{ $current=$iv_ruleDtoProperty.current; }
	EOF;

// Rule DtoProperty
ruleDtoProperty returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getDtoPropertyAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDtoPropertyRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getDtoPropertyAccess().getColonKeyword_1());
		}
		(
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDtoPropertyRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getDtoPropertyAccess().getClassTypeDtoCrossReference_2_0_0());
					}
					ruleQualifiedName
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					lv_type_3_0=RULE_DATATYPE
					{
						newLeafNode(lv_type_3_0, grammarAccess.getDtoPropertyAccess().getTypeDATATYPETerminalRuleCall_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDtoPropertyRule());
						}
						setWithLastConsumed(
							$current,
							"type",
							lv_type_3_0,
							"prodest.es.gov.br.dsl.NestDsl.DATATYPE");
					}
				)
			)
		)
		(
			(
				lv_array_4_0='[]'
				{
					newLeafNode(lv_array_4_0, grammarAccess.getDtoPropertyAccess().getArrayLeftSquareBracketRightSquareBracketKeyword_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDtoPropertyRule());
					}
					setWithLastConsumed($current, "array", lv_array_4_0, "[]");
				}
			)
		)?
		(
			otherlv_5=';'
			{
				newLeafNode(otherlv_5, grammarAccess.getDtoPropertyAccess().getSemicolonKeyword_4());
			}
		)?
	)
;

// Entry rule entryRuleRelation
entryRuleRelation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRelationRule()); }
	iv_ruleRelation=ruleRelation
	{ $current=$iv_ruleRelation.current; }
	EOF;

// Rule Relation
ruleRelation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getRelationAccess().getOneArgumentOneArgumentRelationParserRuleCall_0_0());
				}
				lv_oneArgument_0_0=ruleOneArgumentRelation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRelationRule());
					}
					set(
						$current,
						"oneArgument",
						lv_oneArgument_0_0,
						"prodest.es.gov.br.dsl.NestDsl.OneArgumentRelation");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getRelationAccess().getMultipleArgumentMultipleArgumentRelationParserRuleCall_1_0());
				}
				lv_multipleArgument_1_0=ruleMultipleArgumentRelation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRelationRule());
					}
					set(
						$current,
						"multipleArgument",
						lv_multipleArgument_1_0,
						"prodest.es.gov.br.dsl.NestDsl.MultipleArgumentRelation");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleOneArgumentRelation
entryRuleOneArgumentRelation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOneArgumentRelationRule()); }
	iv_ruleOneArgumentRelation=ruleOneArgumentRelation
	{ $current=$iv_ruleOneArgumentRelation.current; }
	EOF;

// Rule OneArgumentRelation
ruleOneArgumentRelation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_argument_0_1='OneToOne'
					{
						newLeafNode(lv_argument_0_1, grammarAccess.getOneArgumentRelationAccess().getArgumentOneToOneKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getOneArgumentRelationRule());
						}
						setWithLastConsumed($current, "argument", lv_argument_0_1, null);
					}
					    |
					lv_argument_0_2='ManyToMany'
					{
						newLeafNode(lv_argument_0_2, grammarAccess.getOneArgumentRelationAccess().getArgumentManyToManyKeyword_0_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getOneArgumentRelationRule());
						}
						setWithLastConsumed($current, "argument", lv_argument_0_2, null);
					}
				)
			)
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getOneArgumentRelationRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getOneArgumentRelationAccess().getTypeEntityCrossReference_1_0());
				}
			)
		)
	)
;

// Entry rule entryRuleMultipleArgumentRelation
entryRuleMultipleArgumentRelation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMultipleArgumentRelationRule()); }
	iv_ruleMultipleArgumentRelation=ruleMultipleArgumentRelation
	{ $current=$iv_ruleMultipleArgumentRelation.current; }
	EOF;

// Rule MultipleArgumentRelation
ruleMultipleArgumentRelation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_argument_0_1='ManyToOne'
					{
						newLeafNode(lv_argument_0_1, grammarAccess.getMultipleArgumentRelationAccess().getArgumentManyToOneKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getMultipleArgumentRelationRule());
						}
						setWithLastConsumed($current, "argument", lv_argument_0_1, null);
					}
					    |
					lv_argument_0_2='OneToMany'
					{
						newLeafNode(lv_argument_0_2, grammarAccess.getMultipleArgumentRelationAccess().getArgumentOneToManyKeyword_0_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getMultipleArgumentRelationRule());
						}
						setWithLastConsumed($current, "argument", lv_argument_0_2, null);
					}
				)
			)
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMultipleArgumentRelationRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getMultipleArgumentRelationAccess().getTypeEntityCrossReference_1_0());
				}
			)
		)
		otherlv_2=','
		{
			newLeafNode(otherlv_2, grammarAccess.getMultipleArgumentRelationAccess().getCommaKeyword_2());
		}
		(
			(
				lv_secondArgument_3_0=RULE_ARGUMENTREGEX
				{
					newLeafNode(lv_secondArgument_3_0, grammarAccess.getMultipleArgumentRelationAccess().getSecondArgumentARGUMENTREGEXTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMultipleArgumentRelationRule());
					}
					setWithLastConsumed(
						$current,
						"secondArgument",
						lv_secondArgument_3_0,
						"prodest.es.gov.br.dsl.NestDsl.ARGUMENTREGEX");
				}
			)
		)
	)
;

// Entry rule entryRulePropertyOptions
entryRulePropertyOptions returns [String current=null]:
	{ newCompositeNode(grammarAccess.getPropertyOptionsRule()); }
	iv_rulePropertyOptions=rulePropertyOptions
	{ $current=$iv_rulePropertyOptions.current.getText(); }
	EOF;

// Rule PropertyOptions
rulePropertyOptions returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getPropertyOptionsAccess().getRequiredOptionParserRuleCall());
	}
	this_RequiredOption_0=ruleRequiredOption
	{
		$current.merge(this_RequiredOption_0);
	}
	{
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleRequiredOption
entryRuleRequiredOption returns [String current=null]:
	{ newCompositeNode(grammarAccess.getRequiredOptionRule()); }
	iv_ruleRequiredOption=ruleRequiredOption
	{ $current=$iv_ruleRequiredOption.current.getText(); }
	EOF;

// Rule RequiredOption
ruleRequiredOption returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='required'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRequiredOptionAccess().getRequiredKeyword_0());
		}
		kw=':'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRequiredOptionAccess().getColonKeyword_1());
		}
		this_BOOLEANTYTPE_2=RULE_BOOLEANTYTPE
		{
			$current.merge(this_BOOLEANTYTPE_2);
		}
		{
			newLeafNode(this_BOOLEANTYTPE_2, grammarAccess.getRequiredOptionAccess().getBOOLEANTYTPETerminalRuleCall_2());
		}
	)
;

// Entry rule entryRuleMethod
entryRuleMethod returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMethodRule()); }
	iv_ruleMethod=ruleMethod
	{ $current=$iv_ruleMethod.current; }
	EOF;

// Rule Method
ruleMethod returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_verb_0_1='Get'
					{
						newLeafNode(lv_verb_0_1, grammarAccess.getMethodAccess().getVerbGetKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getMethodRule());
						}
						setWithLastConsumed($current, "verb", lv_verb_0_1, null);
					}
					    |
					lv_verb_0_2='Post'
					{
						newLeafNode(lv_verb_0_2, grammarAccess.getMethodAccess().getVerbPostKeyword_0_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getMethodRule());
						}
						setWithLastConsumed($current, "verb", lv_verb_0_2, null);
					}
					    |
					lv_verb_0_3='Delete'
					{
						newLeafNode(lv_verb_0_3, grammarAccess.getMethodAccess().getVerbDeleteKeyword_0_0_2());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getMethodRule());
						}
						setWithLastConsumed($current, "verb", lv_verb_0_3, null);
					}
					    |
					lv_verb_0_4='Put'
					{
						newLeafNode(lv_verb_0_4, grammarAccess.getMethodAccess().getVerbPutKeyword_0_0_3());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getMethodRule());
						}
						setWithLastConsumed($current, "verb", lv_verb_0_4, null);
					}
				)
			)
		)
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getMethodAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMethodRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getMethodAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getMethodAccess().getArgsMethodArgParserRuleCall_3_0_0());
					}
					lv_args_3_0=ruleMethodArg
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMethodRule());
						}
						add(
							$current,
							"args",
							lv_args_3_0,
							"prodest.es.gov.br.dsl.NestDsl.MethodArg");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_4=','
				{
					newLeafNode(otherlv_4, grammarAccess.getMethodAccess().getCommaKeyword_3_1());
				}
			)?
		)*
		otherlv_5='):'
		{
			newLeafNode(otherlv_5, grammarAccess.getMethodAccess().getRightParenthesisColonKeyword_4());
		}
		(
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getMethodRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getMethodAccess().getReturnClassTypeAbstractElementCrossReference_5_0_0());
					}
					ruleQualifiedName
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					lv_returnType_7_0=RULE_DATATYPE
					{
						newLeafNode(lv_returnType_7_0, grammarAccess.getMethodAccess().getReturnTypeDATATYPETerminalRuleCall_5_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getMethodRule());
						}
						setWithLastConsumed(
							$current,
							"returnType",
							lv_returnType_7_0,
							"prodest.es.gov.br.dsl.NestDsl.DATATYPE");
					}
				)
			)
		)
		(
			(
				lv_array_8_0='[]'
				{
					newLeafNode(lv_array_8_0, grammarAccess.getMethodAccess().getArrayLeftSquareBracketRightSquareBracketKeyword_6_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMethodRule());
					}
					setWithLastConsumed($current, "array", lv_array_8_0, "[]");
				}
			)
		)?
		(
			otherlv_9=';'
			{
				newLeafNode(otherlv_9, grammarAccess.getMethodAccess().getSemicolonKeyword_7());
			}
		)?
	)
;

// Entry rule entryRuleMethodArg
entryRuleMethodArg returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMethodArgRule()); }
	iv_ruleMethodArg=ruleMethodArg
	{ $current=$iv_ruleMethodArg.current; }
	EOF;

// Rule MethodArg
ruleMethodArg returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getMethodArgAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMethodArgRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getMethodArgAccess().getColonKeyword_1());
		}
		(
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getMethodArgRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getMethodArgAccess().getClassTypeAbstractElementCrossReference_2_0_0());
					}
					ruleQualifiedName
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					lv_type_3_0=RULE_DATATYPE
					{
						newLeafNode(lv_type_3_0, grammarAccess.getMethodArgAccess().getTypeDATATYPETerminalRuleCall_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getMethodArgRule());
						}
						setWithLastConsumed(
							$current,
							"type",
							lv_type_3_0,
							"prodest.es.gov.br.dsl.NestDsl.DATATYPE");
					}
				)
			)
		)
		(
			(
				lv_array_4_0='[]'
				{
					newLeafNode(lv_array_4_0, grammarAccess.getMethodArgAccess().getArrayLeftSquareBracketRightSquareBracketKeyword_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMethodArgRule());
					}
					setWithLastConsumed($current, "array", lv_array_4_0, "[]");
				}
			)
		)?
	)
;

RULE_DATATYPE : ('string'|'number'|'Date'|'boolean');

RULE_BOOLEANTYTPE : ('true'|'false');

RULE_ARGUMENTREGEX : ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')* '=>' ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')* '.' ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
